databricks-logo4. Create Numpy Image Objects(Python) Import Notebook
Image Processing
Create Gray images
#read image data in
import pandas as pd
image_data = pd.read_json("/dbfs//Cervix Data/params/params1.json")
image_data.shape
#filter out wrong labels (on kaggle competition page)
ignore_wrong_labal = [x not in ["/dbfs//Cervix Data/same_aspect/Type_1/80.jpg", "/dbfs//Cervix Data/same_aspect/Type_3/968.jpg","/dbfs//Cervix Data/same_aspect/Type_3/1120.jpg"] for x in image_data["dst_path"]]
image_data = image_data[ignore_wrong_labal]
print(image_data.shape)
image_data.to_json("/dbfs//Cervix Data/params/params1.json")
#import libraries
import numpy as np
import keras
from sklearn.utils import shuffle
import numpy as np
import cv2
Using TensorFlow backend.
from PIL import Image 
from pyspark.sql.types import StringType, StructType, DoubleType, StructField,IntegerType

from __future__ import print_function
import pandas as pd
#create train image object gray images
#do not augment since augmentation will occur at time of training
#this will speed up augmentation since all data is in memory
from sklearn.model_selection import train_test_split
image_data = pd.read_json("/dbfs//Cervix Data/params/params1.json")
train, valid = train_test_split(image_data, test_size=0.1, random_state = 100)
images = []
angles = []
i =0
for key, batch_sample in train.iterrows():
  if i % 100 == 0:
    print(i)
  name = batch_sample.dst_path
  img = cv2.imread(name)
  img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  #rotation_angle = np.random.randint(low=-60,high=61,size=1)
  #img_rot= rotation(img, rotation_angle)
  #aug = np.random.randint(low=1,high=20,size=1)[0]
  #img_aug=perspectiveTransform(img,aug)
  #img_flip = np.fliplr(img)
  #rotation_angle = np.random.randint(low=-60,high=61,size=1)
  #img_flip_rot= rotation(img_flip, rotation_angle)
  #aug = np.random.randint(low=1,high=20,size=1)[0]
  #img_flip_aug=perspectiveTransform(img_flip,aug)  
  #center_image = image_read(name, batch_sample.flip, batch_sample.augmentation)
  center_angle = [0,0,0]
  center_angle[batch_sample.label] = 1
  images.append(img)
  #images.append(img_rot)
  #images.append(img_aug)
  #images.append(img_flip)
  #images.append(img_flip_rot)
  #images.append(img_flip_aug)
  angles.append(center_angle)
  #angles.append(center_angle)
  #angles.append(center_angle)
  #angles.append(center_angle)
  #angles.append(center_angle)
  #angles.append(center_angle)
  #images.append(np.fliplr(center_image))
  #angles.append([1-center_angle,center_angle])
  i+=1
X_train = np.array(images)
y_train = np.array(angles)
#create validation data- gray images
def min_max_normalization(x,min,max):
  """
  This function takes an n by m array and normalizes each value based on the average of min and max values
  of the RBG scale (min=0 and max=255).

  It return an n by m array
  """
  avg_value=(max+min)/2.0
  norm_array = np.zeros(x.shape)+avg_value
  normalized_x= (x-norm_array)/norm_array
  return normalized_x
images = []
angles = []
i=0
for key, batch_sample in valid.iterrows():
  if i % 100 == 0:
    print(i)
  name = batch_sample.dst_path
  img = cv2.imread(name)
  img = min_max_normalization(cv2.cvtColor(img, cv2.COLOR_BGR2GRAY), 0 ,255) 
  #center_image = image_read(name, batch_sample.flip, batch_sample.augmentation)
  center_angle = [0,0,0]
  center_angle[batch_sample.label] = 1
  images.append(img)
  angles.append(center_angle)

  #images.append(np.fliplr(center_image))
  #angles.append([1-center_angle,center_angle])
  i+=1
X_val = np.array(images)
y_val = np.array(angles)
#save numpy objects
np.save("/dbfs//Cervix Data/same_aspect/X_train_gray.npy", X_train)
np.save("/dbfs//Cervix Data/same_aspect/y_train_gray.npy", y_train)
np.save("/dbfs//Cervix Data/same_aspect/X_val_gray.npy", X_val)
np.save("/dbfs//Cervix Data/same_aspect/y_val_gray.npy", y_val)
Create Color Images
#create train image object color images
#do not augment since augmentation will occur at time of training
#this will speed up augmentation since all data is in memory
from sklearn.model_selection import train_test_split
image_data = pd.read_json("/dbfs//Cervix Data/params/params1.json")
train, valid = train_test_split(image_data, test_size=0.1, random_state = 100)
images = []
angles = []
i =0
for key, batch_sample in train.iterrows():
  if i % 100 == 0:
    print(i)
  name = batch_sample.dst_path
  img = cv2.imread(name)
  img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
  #rotation_angle = np.random.randint(low=-60,high=61,size=1)
  #img_rot= rotation(img, rotation_angle)
  #aug = np.random.randint(low=1,high=20,size=1)[0]
  #img_aug=perspectiveTransform(img,aug)
  #img_flip = np.fliplr(img)
  #rotation_angle = np.random.randint(low=-60,high=61,size=1)
  #img_flip_rot= rotation(img_flip, rotation_angle)
  #aug = np.random.randint(low=1,high=20,size=1)[0]
  #img_flip_aug=perspectiveTransform(img_flip,aug)  
  #center_image = image_read(name, batch_sample.flip, batch_sample.augmentation)
  center_angle = [0,0,0]
  center_angle[batch_sample.label] = 1
  images.append(img)
  #images.append(img_rot)
  #images.append(img_aug)
  #images.append(img_flip)
  #images.append(img_flip_rot)
  #images.append(img_flip_aug)
  angles.append(center_angle)
  #angles.append(center_angle)
  #angles.append(center_angle)
  #angles.append(center_angle)
  #angles.append(center_angle)
  #angles.append(center_angle)
  #images.append(np.fliplr(center_image))
  #angles.append([1-center_angle,center_angle])
  i+=1
X_train = np.array(images)
y_train = np.array(angles)
#create validation data- color images
def min_max_normalization(x,min,max):
  """
  This function takes an n by m array and normalizes each value based on the average of min and max values
  of the RBG scale (min=0 and max=255).

  It return an n by m array
  """
  avg_value=(max+min)/2.0
  norm_array = np.zeros(x.shape)+avg_value
  normalized_x= (x-norm_array)/norm_array
  return normalized_x
images = []
angles = []
i=0
for key, batch_sample in valid.iterrows():
  if i % 100 == 0:
    print(i)
  name = batch_sample.dst_path
  img = cv2.imread(name)
  img = min_max_normalization(cv2.cvtColor(img, cv2.COLOR_BGR2RGB), 0 ,255) 
  #center_image = image_read(name, batch_sample.flip, batch_sample.augmentation)
  center_angle = [0,0,0]
  center_angle[batch_sample.label] = 1
  images.append(img)
  angles.append(center_angle)

  #images.append(np.fliplr(center_image))
  #angles.append([1-center_angle,center_angle])
  i+=1
X_val = np.array(images)
y_val = np.array(angles)
#save numpy objects
np.save("/dbfs//Cervix Data/same_aspect/X_train.npy", X_train)
np.save("/dbfs//Cervix Data/same_aspect/y_train.npy", y_train)
np.save("/dbfs//Cervix Data/same_aspect/X_val.npy", X_val)
np.save("/dbfs//Cervix Data/same_aspect/y_val.npy", y_val)
